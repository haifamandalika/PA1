{"version":3,"sources":["pages/Dashboard.js","components/Cards/InfoCard.js","components/Chart/ChartCard.js","components/Chart/ChartLegend.js","components/RoundIcon.js","../node_modules/classnames/index.js","utils/demo/chartsData.js"],"names":["Dashboard","useState","page","setPage","data","setData","totalResults","response","length","useEffect","slice","className","title","value","icon","PeopleIcon","iconColorClass","bgColorClass","map","user","i","key","src","logop","alt","name","job","amount","type","status","Date","date","toLocaleDateString","resultsPerPage","label","onChange","p","doughnutOptions","legends","doughnutLegends","lineOptions","lineLegends","InfoCard","children","Chart","ChartLegend","legend","color","RoundIcon","Icon","cls","classNames","hasOwn","hasOwnProperty","classes","arguments","arg","argType","push","Array","isArray","inner","apply","call","join","module","exports","default","barLegends","datasets","backgroundColor","labels","options","responsive","cutoutPercentage","display","borderColor","fill","tooltips","mode","intersect","hover","scales","x","scaleLabel","labelString","y","barOptions","borderWidth"],"mappings":"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","file":"static/js/7.b3947ec0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport CTA from '../components/CTA'\nimport InfoCard from '../components/Cards/InfoCard'\nimport ChartCard from '../components/Chart/ChartCard'\nimport { Doughnut, Line } from 'react-chartjs-2'\nimport ChartLegend from '../components/Chart/ChartLegend'\nimport PageTitle from '../components/Typography/PageTitle'\nimport { ChatIcon, CartIcon, MoneyIcon, PeopleIcon } from '../icons'\nimport RoundIcon from '../components/RoundIcon'\nimport response from '../utils/demo/tableData'\nimport logop from '../assets/img/logop.png'\nimport {\n  TableBody,\n  TableContainer,\n  Table,\n  TableHeader,\n  TableCell,\n  TableRow,\n  TableFooter,\n  Avatar,\n  Badge,\n  Pagination,\n} from '@windmill/react-ui'\n\nimport {\n  doughnutOptions,\n  lineOptions,\n  doughnutLegends,\n  lineLegends,\n} from '../utils/demo/chartsData'\n\nfunction Dashboard() {\n  const [page, setPage] = useState(1)\n  const [data, setData] = useState([])\n\n  // pagination setup\n  const resultsPerPage = 10\n  const totalResults = response.length\n\n  // pagination change control\n  function onPageChange(p) {\n    setPage(p)\n  }\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n  useEffect(() => {\n    setData(response.slice((page - 1) * resultsPerPage, page * resultsPerPage))\n  }, [page])\n\n  return (\n    <>\n      <PageTitle>Dashboard</PageTitle>\n\n      <CTA />\n\n      {/* <!-- Cards --> */}\n      <div className=\"grid gap-6 mb-8 md:grid-cols-2 xl:grid-cols-4\">\n        <InfoCard title=\"Definisi Umum\" value=\"6389\">\n          <RoundIcon\n            icon={PeopleIcon}\n            iconColorClass=\"text-orange-500 dark:text-orange-100\"\n            bgColorClass=\"bg-orange-100 dark:bg-orange-500\"\n            className=\"mr-4\"\n          />\n        </InfoCard>\n        \n        <InfoCard title=\"Transmisi Pneumonia\" value=\"6389\">\n          <RoundIcon\n            icon={PeopleIcon}\n            iconColorClass=\"text-orange-500 dark:text-orange-100\"\n            bgColorClass=\"bg-orange-100 dark:bg-orange-500\"\n            className=\"mr-4\"\n          />\n        </InfoCard>\n        \n        <InfoCard title=\"Faktor & Risiko Pneumonia\" value=\"6389\">\n          <RoundIcon\n            icon={PeopleIcon}\n            iconColorClass=\"text-orange-500 dark:text-orange-100\"\n            bgColorClass=\"bg-orange-100 dark:bg-orange-500\"\n            className=\"mr-4\"\n          />\n        </InfoCard>\n        \n        <InfoCard title=\"Mencegah Pneumonia\" value=\"6389\">\n          <RoundIcon\n            icon={PeopleIcon}\n            iconColorClass=\"text-orange-500 dark:text-orange-100\"\n            bgColorClass=\"bg-orange-100 dark:bg-orange-500\"\n            className=\"mr-4\"\n          />\n        </InfoCard>\n\n        {/* <InfoCard title=\"Account balance\" value=\"$ 46,760.89\">\n          <RoundIcon\n            icon={MoneyIcon}\n            iconColorClass=\"text-green-500 dark:text-green-100\"\n            bgColorClass=\"bg-green-100 dark:bg-green-500\"\n            className=\"mr-4\"\n          />\n        </InfoCard> */}\n\n        {/* <InfoCard title=\"Informasi Umum\" value=\"376\">\n          <RoundIcon\n            icon={CartIcon}\n            iconColorClass=\"text-blue-500 dark:text-blue-100\"\n            bgColorClass=\"bg-blue-100 dark:bg-blue-500\"\n            className=\"mr-4\"\n          />\n        </InfoCard> */}\n\n        {/* <InfoCard title=\"Pending contacts\" value=\"35\">\n          <RoundIcon\n            icon={ChatIcon}\n            iconColorClass=\"text-teal-500 dark:text-teal-100\"\n            bgColorClass=\"bg-teal-100 dark:bg-teal-500\"\n            className=\"mr-4\"\n          />\n        </InfoCard> */}\n      </div>\n\n      <TableContainer>\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>Kabupaten</TableCell>\n              <TableCell>Tahun</TableCell>\n              <TableCell>Status</TableCell>\n              <TableCell>Date</TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {data.map((user, i) => (\n              <TableRow key={i}>\n                <TableCell>\n                  <div className=\"flex items-center text-sm\">\n                    <Avatar className=\"hidden mr-3 md:block\" src={logop} alt=\"User image\" />\n                    <div>\n                      <p className=\"font-semibold\">{user.name}</p>\n                      <p className=\"text-xs text-gray-600 dark:text-gray-400\">{user.job}</p>\n                    </div>\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <span className=\"text-sm\">$ {user.amount}</span>\n                </TableCell>\n                <TableCell>\n                  <Badge type={user.status}>{user.status}</Badge>\n                </TableCell>\n                <TableCell>\n                  <span className=\"text-sm\">{new Date(user.date).toLocaleDateString()}</span>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter>\n          <Pagination\n            totalResults={totalResults}\n            resultsPerPage={resultsPerPage}\n            label=\"Table navigation\"\n            onChange={onPageChange}\n          />\n        </TableFooter>\n      </TableContainer>\n\n      <PageTitle>Charts</PageTitle>\n      <div className=\"grid gap-6 mb-8 md:grid-cols-2\">\n        <ChartCard title=\"Revenue\">\n          <Doughnut {...doughnutOptions} />\n          <ChartLegend legends={doughnutLegends} />\n        </ChartCard>\n\n        <ChartCard title=\"Traffic\">\n          <Line {...lineOptions} />\n          <ChartLegend legends={lineLegends} />\n        </ChartCard>\n      </div>\n    </>\n  )\n}\n\nexport default Dashboard\n","import React from 'react'\nimport { Card, CardBody } from '@windmill/react-ui'\n\nfunction InfoCard({ title, value, children: icon }) {\n  return (\n    <Card>\n      <CardBody className=\"flex items-center\">\n        {icon}\n        <div>\n          <p className=\"mb-2 text-sm font-medium text-gray-600 dark:text-gray-400\">{title}</p>\n          <p className=\"text-lg font-semibold text-gray-700 dark:text-gray-200\">{value}</p>\n        </div>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default InfoCard\n","import React from 'react'\n\nfunction Chart({ children, title }) {\n  return (\n    <div className=\"min-w-0 p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800\">\n      <p className=\"mb-4 font-semibold text-gray-800 dark:text-gray-300\">{title}</p>\n      {children}\n    </div>\n  )\n}\n\nexport default Chart\n","import React from 'react'\n\nfunction ChartLegend({ legends }) {\n  return (\n    <div className=\"flex justify-center mt-4 space-x-3 text-sm text-gray-600 dark:text-gray-400\">\n      {legends.map((legend) => (\n        <div className=\"flex items-center\" key={legend.title}>\n          <span className={`inline-block w-3 h-3 mr-1 ${legend.color} rounded-full`}></span>\n          <span>{legend.title}</span>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default ChartLegend\n","import React from 'react'\nimport classNames from 'classnames'\n\nfunction RoundIcon({\n  icon: Icon,\n  iconColorClass = 'text-purple-600 dark:text-purple-100',\n  bgColorClass = 'bg-purple-100 dark:bg-purple-600',\n  className,\n}) {\n  const baseStyle = 'p-3 rounded-full'\n\n  const cls = classNames(baseStyle, iconColorClass, bgColorClass, className)\n  return (\n    <div className={cls}>\n      <Icon className=\"w-5 h-5\" />\n    </div>\n  )\n}\n\nexport default RoundIcon\n","/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","export const doughnutLegends = [\n  { title: 'Tinggi', color: 'bg-red-500' },\n  { title: 'Rendah', color: 'bg-green-600' },\n  { title: 'Sedang', color: 'bg-yellow-600' },\n]\n\nexport const lineLegends = [\n  { title: 'Tinggi', color: 'bg-red-600' },\n  { title: 'Rendah', color: 'bg-green-600' },\n  // { title: 'Sedang', color: 'bg-yellow-600' },\n]\n\nexport const barLegends = [\n  { title: 'Rendah', color: 'bg-green-600' },\n  { title: 'Sedang', color: 'bg-yellow-600' },\n]\n\nexport const doughnutOptions = {\n  data: {\n    datasets: [\n      {\n        data: [33, 33, 33],\n        /**\n         * These colors come from Tailwind CSS palette\n         * https://tailwindcss.com/docs/customizing-colors/#default-color-palette\n         */\n        backgroundColor: ['#0694a2', '#1c64f2', '#7e3af2'],\n        label: 'Dataset 1',\n      },\n    ],\n    labels: ['Tinggi', 'Rendah', 'Sedang'],\n  },\n  options: {\n    responsive: true,\n    cutoutPercentage: 80,\n  },\n  legend: {\n    display: false,\n  },\n}\n\nexport const lineOptions = {\n  data: {\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n    datasets: [\n      {\n        label: 'Rendah',\n        /**\n         * These colors come from Tailwind CSS palette\n         * https://tailwindcss.com/docs/customizing-colors/#default-color-palette\n         */\n        backgroundColor: '#0694a2',\n        borderColor: '#0694a2',\n        data: [43, 48, 40, 54, 67, 73, 70],\n        fill: false,\n      },\n      {\n        label: 'Sedang',\n        fill: false,\n        /**\n         * These colors come from Tailwind CSS palette\n         * https://tailwindcss.com/docs/customizing-colors/#default-color-palette\n         */\n        backgroundColor: '#7e3af2',\n        borderColor: '#7e3af2',\n        data: [24, 50, 64, 74, 52, 51, 65],\n      },\n    ],\n  },\n  options: {\n    responsive: true,\n    tooltips: {\n      mode: 'index',\n      intersect: false,\n    },\n    hover: {\n      mode: 'nearest',\n      intersect: true,\n    },\n    scales: {\n      x: {\n        display: true,\n        scaleLabel: {\n          display: true,\n          labelString: 'Month',\n        },\n      },\n      y: {\n        display: true,\n        scaleLabel: {\n          display: true,\n          labelString: 'Value',\n        },\n      },\n    },\n  },\n  legend: {\n    display: false,\n  },\n}\n\nexport const barOptions = {\n  data: {\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n    datasets: [\n      {\n        label: 'Shoes',\n        backgroundColor: '#0694a2',\n        // borderColor: window.chartColors.red,\n        borderWidth: 1,\n        data: [-3, 14, 52, 74, 33, 90, 70],\n      },\n      {\n        label: 'Bags',\n        backgroundColor: '#7e3af2',\n        // borderColor: window.chartColors.blue,\n        borderWidth: 1,\n        data: [66, 33, 43, 12, 54, 62, 84],\n      },\n    ],\n  },\n  options: {\n    responsive: true,\n  },\n  legend: {\n    display: false,\n  },\n}\n"],"sourceRoot":""}